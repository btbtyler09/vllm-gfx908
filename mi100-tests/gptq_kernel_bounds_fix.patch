--- a/csrc/quantization/gptq/q_gemm.cu
+++ b/csrc/quantization/gptq/q_gemm.cu
@@ -231,11 +231,11 @@ __global__ void gemm_half_q_half_gptq_4bit_kernel(
 
   // Zero output
   if (n >= size_n) return;
+  
+  // Also check that we can safely access 4 columns
+  if (n + 3 >= size_n) return;
 
   if (blockIdx.z == 0) {
     for (int m = 0; m < m_count; m++)
       *((uint64_t*)c_.item_ptr(offset_m + m, n)) = 0;
   }
 
@@ -256,8 +256,8 @@ __global__ void gemm_half_q_half_gptq_4bit_kernel(
   float scales[4];
   half2 z1z16[4][2];
   half2 y1y16[4][2];
-  b_gptq_qzeros_.item4(zeros, group, n);
-  b_gptq_scales_.item4_f(scales, group, n);
+  b_gptq_qzeros_.item4(zeros, group, n);  // This accesses columns n, n+1, n+2, n+3
+  b_gptq_scales_.item4_f(scales, group, n);  // This accesses columns n, n+1, n+2, n+3
   dequant_4bit_8_prep_zero(zeros[0] + 1, z1z16[0], y1y16[0]);
   dequant_4bit_8_prep_zero(zeros[1] + 1, z1z16[1], y1y16[1]);
   dequant_4bit_8_prep_zero(zeros[2] + 1, z1z16[2], y1y16[2]);